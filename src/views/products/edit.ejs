<%- contentFor('title') %>Edit Product

<%- contentFor('body') %>
<div class="row">
    <div class="col-md-8 offset-md-2">
        <h2>Edit Product</h2>
        <form action="/products/<%= product._id %>?_method=PUT" method="POST" enctype="multipart/form-data" id="productForm">
            <!-- Basic Information -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Basic Information</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="category" class="form-label">Category*</label>
                        <select class="form-select" id="category" name="category" required>
                            <option value="">Select Category</option>
                            <option value="pc" <%= product.category === 'pc' ? 'selected' : '' %>>PC</option>
                            <option value="laptop" <%= product.category === 'laptop' ? 'selected' : '' %>>Laptop</option>
                            <option value="cpu" <%= product.category === 'cpu' ? 'selected' : '' %>>CPU</option>
                            <option value="graphicsCard" <%= product.category === 'graphicsCard' ? 'selected' : '' %>>Graphics Card</option>
                            <option value="motherboard" <%= product.category === 'motherboard' ? 'selected' : '' %>>Motherboard</option>
                            <option value="memory" <%= product.category === 'memory' ? 'selected' : '' %>>Memory</option>
                            <option value="storage" <%= product.category === 'storage' ? 'selected' : '' %>>Storage</option>
                            <option value="monitor" <%= product.category === 'monitor' ? 'selected' : '' %>>Monitor</option>
                            <option value="gears" <%= product.category === 'gears' ? 'selected' : '' %>>Gears</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="brand" class="form-label">Brand*</label>
                        <input type="text" class="form-control" id="brand" name="brand" value="<%= product.brand %>" required>
                    </div>
                    <div class="mb-3">
                        <label for="model" class="form-label">Model*</label>
                        <input type="text" class="form-control" id="model" name="model" value="<%= product.model %>" required>
                    </div>
                    <div class="mb-3">
                        <label for="price" class="form-label">Price*</label>
                        <input type="number" class="form-control" id="price" name="price" min="0" step="0.01" value="<%= product.price %>" required>
                    </div>
                    <div class="mb-3">
                        <label for="stock" class="form-label">Stock*</label>
                        <input type="number" class="form-control" id="stock" name="stock" min="0" value="<%= product.stock %>" required>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description*</label>
                        <textarea class="form-control" id="description" name="description" rows="3" required><%= product.description %></textarea>
                    </div>
                </div>
            </div>

            <!-- Category Specific Specifications -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Specifications</h5>
                </div>
                <div class="card-body" id="specificationsContainer">
                    <!-- Populated by JavaScript -->
                </div>
            </div>

            <!-- Image Management -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Product Images</h5>
                </div>
                <div class="card-body">
                    <!-- Existing Images -->
                    <div class="mb-4">
                        <label class="form-label">Current Images</label>
                        <div id="existingImages" class="d-flex flex-wrap gap-3">
                            <% product.images.forEach((image, index) => { %>
                                <div class="position-relative" data-image-id="<%= image._id %>">
                                    <img src="<%= image.url %>" 
                                         alt="Product image <%= index + 1 %>" 
                                         class="img-thumbnail" 
                                         style="width: 150px; height: 150px; object-fit: cover;">
                                    <div class="position-absolute top-0 end-0 d-flex gap-1 m-1">
                                        <button type="button" class="btn btn-light btn-sm move-image" data-direction="up" <%= index === 0 ? 'disabled' : '' %>>
                                            <i class="fas fa-arrow-up"></i>
                                        </button>
                                        <button type="button" class="btn btn-light btn-sm move-image" data-direction="down" <%= index === product.images.length - 1 ? 'disabled' : '' %>>
                                            <i class="fas fa-arrow-down"></i>
                                        </button>
                                        <button type="button" class="btn btn-danger btn-sm delete-image">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                    <input type="hidden" name="imageOrder[]" value="<%= image._id %>">
                                </div>
                            <% }); %>
                        </div>
                    </div>

                    <!-- New Images Upload -->
                    <div class="mb-3">
                        <label for="images" class="form-label">Add New Images (Max 5 total)</label>
                        <input type="file" class="form-control" id="images" name="images" multiple accept="image/*">
                        <div id="imagePreview" class="mt-3 d-flex flex-wrap gap-3"></div>
                    </div>
                </div>
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <a href="/products/<%= product._id %>" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>
</div>

<div id="serverDataContainer" 
     data-specification-fields='<%- JSON.stringify(specificationFields) %>'
     data-product-specifications='<%- JSON.stringify(product.specifications || {}) %>'>
</div>

<%- contentFor('script') %>
<script>
// Get data from server-side
const serverDataElement = document.getElementById('serverDataContainer');
const serverData = {
    specificationFields: JSON.parse(serverDataElement.dataset.specificationFields),
    productSpecifications: JSON.parse(serverDataElement.dataset.productSpecifications)
};

// Initialize specification fields
function initializeSpecifications() {
    const container = document.getElementById('specificationsContainer');
    const category = document.getElementById('category').value;
    const fields = serverData.specificationFields[category];
    let html = '';

    if (!fields) {
        container.innerHTML = '<div class="alert alert-info">Please select a category to see specific fields.</div>';
        return;
    }

    fields.forEach(field => {
        const value = serverData.productSpecifications[field.name] || '';
        const required = field.required === false ? '' : ' required';
        const requiredStar = field.required === false ? '' : '*';
        
        if (field.type === 'checkbox') {
            const checked = value ? ' checked' : '';
            html += [
                '<div class="mb-3">',
                '<div class="form-check">',
                '<input type="checkbox" class="form-check-input" id="' + field.name + '"',
                'name="specifications[' + field.name + ']"' + checked + required + '>',
                '<label class="form-check-label" for="' + field.name + '">',
                field.label + requiredStar,
                '</label>',
                '</div>',
                '</div>'
            ].join('');
        } else {
            const escapedValue = value.toString().replace(/"/g, '&quot;');
            html += [
                '<div class="mb-3">',
                '<label for="' + field.name + '" class="form-label">',
                field.label + requiredStar,
                '</label>',
                '<input type="' + field.type + '" class="form-control" id="' + field.name + '"',
                'name="specifications[' + field.name + ']" value="' + escapedValue + '"' + required + '>',
                '</div>'
            ].join('');
        }
    });

    container.innerHTML = html;
}

// Handle category change
document.getElementById('category').addEventListener('change', initializeSpecifications);

// Initialize specifications on page load
document.addEventListener('DOMContentLoaded', initializeSpecifications);

// Handle image preview for new uploads
document.getElementById('images').addEventListener('change', function(e) {
    const preview = document.getElementById('imagePreview');
    preview.innerHTML = '';
    
    const currentImages = document.querySelectorAll('#existingImages > div').length;
    if (this.files.length + currentImages > 5) {
        alert('Total number of images cannot exceed 5');
        this.value = '';
        return;
    }

    Array.from(this.files).forEach(file => {
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const div = document.createElement('div');
                div.className = 'position-relative';
                div.innerHTML = `
                    <img src="${e.target.result}" 
                         class="img-thumbnail" 
                         style="width: 150px; height: 150px; object-fit: cover;">
                `;
                preview.appendChild(div);
            }
            reader.readAsDataURL(file);
        }
    });
});

// Handle image reordering
document.querySelectorAll('.move-image').forEach(button => {
    button.addEventListener('click', function() {
        const direction = this.dataset.direction;
        const imageContainer = this.closest('[data-image-id]');
        const images = Array.from(document.querySelectorAll('#existingImages > div'));
        const currentIndex = images.indexOf(imageContainer);
        
        if (direction === 'up' && currentIndex > 0) {
            imageContainer.parentNode.insertBefore(imageContainer, images[currentIndex - 1]);
        } else if (direction === 'down' && currentIndex < images.length - 1) {
            imageContainer.parentNode.insertBefore(images[currentIndex + 1], imageContainer);
        }
        
        // Update move buttons state
        updateMoveButtonsState();
        // Update hidden input values for order
        updateImageOrder();
    });
});

// Handle image deletion
document.querySelectorAll('.delete-image').forEach(button => {
    button.addEventListener('click', function() {
        if (confirm('Are you sure you want to delete this image?')) {
            const imageContainer = this.closest('[data-image-id]');
            const imageId = imageContainer.dataset.imageId;
            
            // Add hidden input for deleted image
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'deletedImages[]';
            input.value = imageId;
            document.getElementById('productForm').appendChild(input);
            
            // Remove the image container
            imageContainer.remove();
            
            // Update move buttons state
            updateMoveButtonsState();
            // Update hidden input values for order
            updateImageOrder();
        }
    });
});

// Update move buttons state
function updateMoveButtonsState() {
    const images = document.querySelectorAll('#existingImages > div');
    images.forEach((container, index) => {
        const upButton = container.querySelector('[data-direction="up"]');
        const downButton = container.querySelector('[data-direction="down"]');
        
        upButton.disabled = index === 0;
        downButton.disabled = index === images.length - 1;
    });
}

// Update image order hidden inputs
function updateImageOrder() {
    const images = document.querySelectorAll('#existingImages > div');
    const form = document.getElementById('productForm');
    
    // Remove existing order inputs
    form.querySelectorAll('input[name="imageOrder[]"]').forEach(input => input.remove());
    
    // Add new order inputs
    images.forEach(container => {
        const imageId = container.dataset.imageId;
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'imageOrder[]';
        input.value = imageId;
        form.appendChild(input);
    });
}

// Form validation
document.getElementById('productForm').addEventListener('submit', function(e) {
    const currentImages = document.querySelectorAll('#existingImages > div').length;
    const newImages = document.getElementById('images').files.length;
    
    if (currentImages + newImages > 5) {
        e.preventDefault();
        alert('Total number of images cannot exceed 5');
        return;
    }
});
</script> 